package com.cmoney_training_6th.final_project_intellij.controller.admin;

import com.cmoney_training_6th.final_project_intellij.model.MedicalRecipe;
import com.cmoney_training_6th.final_project_intellij.dao.MedicalRecipeRepository;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.JsonIter;
import com.google.gson.JsonArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.NoSuchElementException;

@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/admin/recipe")
public class AdminMedicalRecipeController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MedicalRecipeRepository medicalRecipeRepository;

    @PostMapping(path = "/new", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String addNewMedcalItem(
            HttpServletResponse response,
            @RequestBody MedicalRecipe request
    ) {
        // TODO should refactor here, because fat controller design
        try {
            medicalRecipeRepository.save(request);
            return new CommonResponse("success", 200).toString();
        } catch (DataIntegrityViolationException e) {
            response.setStatus(404);
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404).toString();
        }
    }

    @PostMapping(path = "/edit", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String editMedcalItem(
            HttpServletResponse response,
            @RequestBody MedicalRecipe request
    ) {
        // TODO should refactor here, because fat controller design
        try {
            MedicalRecipe medicalRecipe = medicalRecipeRepository.findById(request.getId()).get(); // 確認 id 是否可以找到東西，沒找到會噴掉被 catch
            medicalRecipe.setQuantity(request.getQuantity());
            medicalRecipeRepository.save(medicalRecipe);
            return new CommonResponse("success", 200).toString();
        } catch (DataIntegrityViolationException e) {
            response.setStatus(404);
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404).toString();
        } catch (NoSuchElementException e) {
            response.setStatus(404);
            return new CommonResponse("id " + request.getId() + " not found: " + e.getMessage(), 404).toString();
        }
    }

    @PostMapping(path = "/delete", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String deleteMedcalItem(
            HttpServletResponse response,
            @RequestBody MedicalRecipe request
    ) {
        // TODO should refactor here, because fat controller design
        try {
            MedicalRecipe medicalRecipe = medicalRecipeRepository.findById(request.getId()).orElse(null); // 確認 id 是否可以找到東西，沒找到會噴掉被 catch
            if(medicalRecipe == null){
                response.setStatus(404);
                return new CommonResponse("recipe " + request.getId() + " not found", 404).toString();
            }
            medicalRecipeRepository.delete(medicalRecipe);
            return new CommonResponse("success", 200).toString();
        } catch (DataIntegrityViolationException e) {
            response.setStatus(404);
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404).toString();
        } catch (NoSuchElementException e) {
            response.setStatus(404);
            return new CommonResponse("id " + request.getId() + " not found: " + e.getMessage(), 404).toString();
        }
    }

    @GetMapping(path = "/all", produces = MediaType.APPLICATION_JSON_VALUE) // debug 用
    public String getAllMedcalItems() {
        JsonIter ji = new JsonIter();
        JsonArray jsonArr = ji.listIntoArrayWithoutKey(medicalRecipeRepository.findAll(), "recipes");
        return new CommonResponse(jsonArr, 200).toString();
    }

}


