package com.cmoney_training_6th.final_project_intellij.controller.admin;

import com.cmoney_training_6th.final_project_intellij.model.Doctor;
import com.cmoney_training_6th.final_project_intellij.model.Pet;
import com.cmoney_training_6th.final_project_intellij.model.User;
import com.cmoney_training_6th.final_project_intellij.repos.*;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.ValidateParameter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.NoSuchElementException;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/admin")
public class AdminPetController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private PetRepository petRepository;

    @Autowired
    private UserPhotoRepository userPhotoRepository;

    @PutMapping(path = "/new/pet", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String addNewPet(
            @RequestParam String username,
            @RequestParam String name,
            @RequestParam String species,
            @RequestParam(required = false) String breed,
            @RequestParam(required = false) int age,
            @RequestParam(required = false) String own_date,
            @RequestParam(required = false) String allergic_with,
            @RequestParam(required = false) boolean neutered, // 0 結紮, 1 未結紮
            @RequestParam(required = false) int gender,
            @RequestParam(required = false) int weight,
            @RequestParam(required = false) String chip
    ) {
//        ValidateParameter checkPassword = new ValidateParameter("password", username);
//        if(!checkPassword.strLongerThan(50)
//                .strShorterThan(0)
//                .getResult()){
//            response.setStatus(400);
//            return new CommonResponse(checkPassword,400);
//        }
        try {
            Pet p = new Pet();
            User owner = userRepository.findByUsername(username).get();
            p.setUser(owner);
            p.setName(name);
            p.setSpecies(species);
            p.setBreed(breed);
            p.setAge(age);
            p.setOwn_date(own_date);
            p.setAllergic_with(allergic_with);
            p.setNeutered(neutered);
            p.setGender(gender);
            p.setWeight(weight);
            p.setChip(chip);
            petRepository.save(p);
        } catch (DataIntegrityViolationException e) {
            return new CommonResponse("Key duplicated", 404).toString();
        } catch (NoSuchElementException e) {
            return new CommonResponse("owner " + username + " not found", 404).toString();
        }
        return new CommonResponse("success", 200).toString();
    }
//
//    @GetMapping(path = "/all", produces = MediaType.APPLICATION_JSON_VALUE) // debug 用
//    public Iterable<User> getAllUsers() {
//        return userRepository.findAll();
//    }
//
//    @GetMapping(path = "/by/id", produces = MediaType.APPLICATION_JSON_VALUE)
//    public String findUserById(@RequestParam int id) {
//        Optional<User> test = userRepository.findById(id);
//        Gson g = new Gson();
//        JsonElement je = g.toJsonTree(test).getAsJsonObject().get("value");
//        JsonObject json = (JsonObject) g.toJsonTree(test).getAsJsonObject().get("value");
//        json.remove("role");
//        json.add("je", je);
//        System.out.println(json);
//        JsonObject newJson = new JsonObject();
//        newJson.addProperty("status", 200);
//        newJson.add("message", json);
//        return new CommonResponse(newJson, 200).toString();
//    }
//
//    @GetMapping(path = "/by/role", produces = MediaType.APPLICATION_JSON_VALUE) // DEBUG
//    public Iterable<User> findUsersByRole(HttpServletResponse response, @RequestParam String role) {
//        System.out.println(userRepository.findAllByRoleOrderByUsername(role));
//        return userRepository.findAllByRoleOrderByUsername(role);
//    }

//    @PersistenceContext
//    public User loadUserById(EntityManager entityManager, int id){
//        return entityManager.getReference(User.class, id);
//    }

}


