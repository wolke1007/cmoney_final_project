package com.cmoney_training_6th.final_project_intellij.controller.user;

import com.cmoney_training_6th.final_project_intellij.model.Doctor;
import com.cmoney_training_6th.final_project_intellij.model.Pet;
import com.cmoney_training_6th.final_project_intellij.model.User;
import com.cmoney_training_6th.final_project_intellij.repos.DoctorRepository;
import com.cmoney_training_6th.final_project_intellij.repos.UserRepository;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.JwtUtil;
import com.cmoney_training_6th.final_project_intellij.util.ValidateParameter;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;


import javax.servlet.http.HttpServletResponse;
import java.util.Optional;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/user/account")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtTokenUtil;

//    @Autowired
//    private DoctorRepository doctorRepository;

    @GetMapping(path = "/hello", produces = MediaType.APPLICATION_JSON_VALUE)
    public String acHello(@RequestParam String utf8) {
        return "account hello 中文測試" + utf8;
    }

    @GetMapping(path = "/all/info", produces = MediaType.APPLICATION_JSON_VALUE) // DEBUG
    public Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }

    @GetMapping(path = "/info", produces = MediaType.APPLICATION_JSON_VALUE)
    public String getUser(@RequestHeader("Authorization") String header) {
        String token = header.substring(7);
        String username = jwtTokenUtil.getUserNameFromJwtToken(token);
        Optional<User> user = userRepository.findByUsername(username);
        Gson g = new Gson();
        JsonObject json = g.toJsonTree(user).getAsJsonObject().get("value").getAsJsonObject();
        json.remove("password"); // 不能讓前端看到密碼
        return new CommonResponse(json, 200).toString();
    }

    @PutMapping(path = "/edit") // Map ONLY POST Requests
    public CommonResponse userEditAccount(
            HttpServletResponse response,
            @RequestHeader("Authorization") String header,
            @RequestBody User request
    ) throws Exception {
        try {
            String token = header.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            User user = userRepository.findByUsername(username).get();
            request.setId(user.getId());
            request.setUsername(user.getUsername());
            request.setPassword(user.getPassword());
            request.setSocialLicenseId(user.getSocialLicenseId());
            userRepository.save(request);
            return new CommonResponse("Saved", 200);
        } catch (DataIntegrityViolationException e) {
            response.setStatus(404);
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404);
        }
    }

}