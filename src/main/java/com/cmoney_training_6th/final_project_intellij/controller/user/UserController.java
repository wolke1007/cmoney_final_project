package com.cmoney_training_6th.final_project_intellij.controller.user;

import com.cmoney_training_6th.final_project_intellij.model.User;
import com.cmoney_training_6th.final_project_intellij.dao.UserRepository;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.JwtUtil;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import io.jsonwebtoken.ExpiredJwtException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;


import javax.servlet.http.HttpServletResponse;
import java.util.Optional;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/user/account")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtTokenUtil;

    @GetMapping(path = "/info", produces = MediaType.APPLICATION_JSON_VALUE)
    public String getUser(HttpServletResponse response,
                                  @RequestHeader("Authorization") String header) {
        // TODO should refactor here, because fat controller design
        try {
            String token = header.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            Optional<User> user = userRepository.findByUsername(username);
            Gson g = new Gson();
            JsonObject json = g.toJsonTree(user).getAsJsonObject().get("value").getAsJsonObject();
//            json.remove("password"); // 不能讓前端看到密碼 // 方便前端使用，把密碼加回去...
            return new CommonResponse(json, 200).toString();
        }catch (ExpiredJwtException e){
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        } catch (io.jsonwebtoken.MalformedJwtException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (StringIndexOutOfBoundsException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        }
    }

    @PostMapping(path = "/edit", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String userEditAccount(
            HttpServletResponse response,
            @RequestHeader("Authorization") String header,
            @RequestBody User request
    ) throws Exception {
        // TODO should refactor here, because fat controller design
        try {
            String token = header.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            User user = userRepository.findByUsername(username).get();
            user.setSocialLicenseId(request.getSocialLicenseId());
            user.setJoinTime(request.getJoinTime());
            user.setFirstName(request.getFirstName());
            user.setLastName(request.getLastName());
            if(!request.getPassword().equals("")){
                user.setPassword(request.getPassword());
            }
            user.setSchool(request.getSchool());
            user.setAddressCity(request.getAddressCity());
            user.setAddressArea(request.getAddressArea());
            user.setAddressLine(request.getAddressLine());
            user.setPhone(request.getPhone());
            user.setBirthday(request.getBirthday());
            user.setRole(request.getRole());
            userRepository.save(user);
            return new CommonResponse("Saved", 200).toString();
        } catch (DataIntegrityViolationException e) {
            response.setStatus(404);
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404).toString();
        } catch (ExpiredJwtException e){
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        } catch (io.jsonwebtoken.MalformedJwtException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (StringIndexOutOfBoundsException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        }
    }

}