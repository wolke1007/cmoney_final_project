package com.cmoney_training_6th.final_project_intellij.controller.user;

import com.cmoney_training_6th.final_project_intellij.model.*;
import com.cmoney_training_6th.final_project_intellij.model.dto.DtoReservation;
import com.cmoney_training_6th.final_project_intellij.repos.*;
import com.cmoney_training_6th.final_project_intellij.services.DoctorService;
import com.cmoney_training_6th.final_project_intellij.services.HospitalService;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.JsonIter;
import com.cmoney_training_6th.final_project_intellij.util.JwtUtil;
import com.google.gson.*;
import io.jsonwebtoken.ExpiredJwtException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import javax.print.Doc;
import javax.servlet.http.HttpServletResponse;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/hospital")
public class HospitalController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private HospitalRepository hospitalRepository;
    @Autowired
    private RoasterRepository roasterRepository;
    @Autowired
    private DoctorRepository doctorRepository;
    @Autowired
    private ScheduleRepository scheduleRepository;
    @Autowired
    private ReservationRepository reservationRepository;
    @Autowired
    private DoctorService doctorService;

    @Autowired
    private JwtUtil jwtTokenUtil;

    @GetMapping(path = "/list", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String getAllHospitals() {
        Gson g = new GsonBuilder().excludeFieldsWithModifiers(Modifier.PROTECTED).create();
        List<Hospital> hospitals = hospitalRepository.findAll();
        JsonIter ji = new JsonIter();
        JsonArray jsonArr = new JsonArray();
        jsonArr = ji.listIntoArrayWithKeys(hospitals,
                Arrays.asList("id", "name", "phone"));
        return new CommonResponse(jsonArr, 200).toString();
    }

    @GetMapping(path = "/doctors", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String getDoctorDetailByHostpitalId(@RequestParam(value = "hospitalId")
                                                       int hospitalId) {
        Gson g = new GsonBuilder().excludeFieldsWithModifiers(Modifier.PROTECTED).create();
        List<Doctor> doctors = doctorService.findByHospitalId(hospitalId);
        JsonIter ji = new JsonIter();
        return new CommonResponse(ji.listIntoArray(doctors), 200).toString();
    }

    @GetMapping(path = "/by/address_area", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String getHospitalByAddressArea(@RequestParam(value = "addressArea")
                                                   String address_area) {
//        hospitalRepository.findBy
        return new CommonResponse("", 200).toString();
    }

    @PostMapping(path = "/reservation/booking", produces = MediaType.APPLICATION_JSON_VALUE)
    public String bookingByDoctorId(
            HttpServletResponse response,
            @RequestBody DtoReservation request,
            @RequestHeader("Authorization") String header) {
        try {
            String token = header.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            Optional<User> user = userRepository.findByUsername(username);
            int scheduleId = scheduleRepository.findByDayAndTime(request.getDay(), request.getTime()).get().getId();
            int roasterId = roasterRepository.findByDoctorIdAndScheduleId(request.getDoctorId(), scheduleId).get().getId();
            List<Reservation> reservations = reservationRepository.
                    findAllByRoasterIdAndDateAndUserId(roasterId, request.getDate(), user.get().getId());
            if (reservations.size() >= 1) {
                int bookingNum = reservations.get(reservations.size() - 1).getNumber();
                return new CommonResponse("booked before, booking number is:" + bookingNum, 404).toString();
            }
            Reservation newRes = new Reservation();
            newRes.setUserId(user.get().getId());
            // 這邊考慮改成用 username 來做，前端會比較好傳值進來
            System.out.println("DEBUG user_id: " + user.get().getId());
            int reservePatientCnt = reservationRepository.findAllByRoasterIdAndDate(roasterId, request.getDate()).size();
            System.out.println("DEBUG reservePatientCnt: " + reservePatientCnt);
            int bookingNum = reservePatientCnt + 1; // 預約這個班表且為同天的人數
            newRes.setNumber(bookingNum);
            newRes.setDate(request.getDate());
            newRes.setRoasterId(roasterId);
            newRes.setPetId(request.getPetId());
            reservationRepository.save(newRes);
            return new CommonResponse("reservation_id: " + bookingNum, 200).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        } catch (NoSuchElementException e) {
            return new CommonResponse("booking fail because wrong value is given.", 404).toString();
        }
//        try {
//            String token = header.substring(7);
//            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
//            Optional<User> user = userRepository.findByUsername(username);
//            List<Reservation> reservation = reservationRepository.
//                    findAllByRoasterIdAndDateAndUserId(request.getRoasterId(), request.getDate(), user.get().getId());
//            if (reservation.size() >= 1) {
//                int bookingNum = reservation.get(reservation.size() - 1).getNumber();
//                return new CommonResponse("booked before, booking number is:" + bookingNum, 404).toString();
//            }
//            request.setUserId(user.get().getId());
//            System.out.println("DEBUG user_id: " + user.get().getId());
//            int reservePatientCnt = reservationRepository.findAllByRoasterIdAndDate(request.getRoasterId(), request.getDate()).size();
//            System.out.println("DEBUG reservePatientCnt: " + reservePatientCnt);
//            int bookingNum = reservePatientCnt + 1; // 預約這個班表且為同天的人數
//            request.setNumber(bookingNum);
//            reservationRepository.save(request);
//            return new CommonResponse("reservation_id: " + bookingNum, 200).toString();
//        } catch (NoSuchElementException e) {
//            return new CommonResponse("booking fail because wrong value is given.", 404).toString();
//        } catch (ExpiredJwtException e) {
//            response.setStatus(403);
//            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
//        }
    }

    @GetMapping(path = "/roasters", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String userGetRoastersByHostpitalId(@RequestParam(value = "hospitalId")
                                                              int hospitalId) {
        List<Roaster> roasters = roasterRepository.findByHospitalId(hospitalId);
        JsonIter ji = new JsonIter();
        JsonArray arr = ji.listIntoArrayWithoutKeys(roasters,
                Arrays.asList("scheduleId", "reservations"));
        for (Roaster roaster : roasters) {
            int roaId = roaster.getId();
            int scheduleId = roaster.getScheduleId();
            Schedule schedule = scheduleRepository.findById(scheduleId).get();
            String time = schedule.getDay() + " " + schedule.getTime();
            for (JsonElement je : arr) {
                je.getAsJsonObject().addProperty("time", time);
            }
        }
        return new CommonResponse(arr, 200).toString();
    }

    @GetMapping(path = "/reservation", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String getAllReservationsByHostpitalId(HttpServletResponse response,
                                                  @RequestParam(value = "hospitalId") int hospitalId,
                                                  @RequestHeader("Authorization") String header) {
        try {
            String token = header.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            User user = userRepository.findByUsername(username).get();
            int userId = user.getId();
            List<Reservation> reservations = reservationRepository.findReservationByUserIdAndHospitalId(userId, hospitalId);
            JsonIter ji = new JsonIter();
            JsonArray arr = ji.listIntoArrayWithoutKey(reservations, "roasterId");
            int index = 0;
            System.out.println("DEBUG reservation size:"+reservations.size());
            for (Reservation res : reservations) {
                int roaId = res.getRoasterId();
                Roaster roaster = roasterRepository.findById(roaId).get();
                int scheduleId = roaster.getScheduleId();
                Schedule schedule = scheduleRepository.findById(scheduleId).get();
                String time = schedule.getDay() + " " + schedule.getTime();
                int doctorId = roaster.getDoctorId();
                arr.get(index).getAsJsonObject().addProperty("day", schedule.getDay());
                arr.get(index).getAsJsonObject().addProperty("time", schedule.getTime());
                arr.get(index).getAsJsonObject().addProperty("doctorId", doctorId);
                index++;
            }
            return new CommonResponse(arr, 200).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        }
    }
}