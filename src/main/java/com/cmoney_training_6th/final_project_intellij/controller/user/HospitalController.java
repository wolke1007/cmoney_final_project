package com.cmoney_training_6th.final_project_intellij.controller.user;

import com.cmoney_training_6th.final_project_intellij.model.*;
import com.cmoney_training_6th.final_project_intellij.repos.*;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.ValidateParameter;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/user/hospital")
public class HospitalController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private RoasterRepository roasterRepository;
    @Autowired
    private DoctorRepository doctorRepository;
    @Autowired
    private ScheduleRepository scheduleRepository;
    @Autowired
    private ReservationRepository reservationRepository;

    @GetMapping(path = "/hello", produces = MediaType.APPLICATION_JSON_VALUE)
    public String acHello() {
        JsonObject newJson = new JsonObject();
        newJson.addProperty("new json test", 123456789);
        return new CommonResponse("heeehehehee", 200).toString();
    }

    @GetMapping(path = "/doctor", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String getDoctorDetailByHostpitalId(@RequestParam(value = "hospital_id")
                                                       int hospital_id) {
        JsonObject retJson = new JsonObject();
        Gson g = new Gson();
        JsonObject json;
        JsonObject doctorJson;
        JsonObject reservationJson;
        int cnt = 0;
        List<Doctor> doctor = doctorRepository.findByHospital_id(hospital_id);
        List<Roaster> roasters;
        try {
            for (Doctor doc : doctor) {
                doctorJson = new JsonObject();
                json = (JsonObject) g.toJsonTree(doc).getAsJsonObject();
                doctorJson.addProperty("doctor_id", json.get("id").toString());
                doctorJson.addProperty("first_name", json.getAsJsonObject("user").get("first_name").getAsString());
                doctorJson.addProperty("last_name", json.getAsJsonObject("user").get("last_name").getAsString());
                roasters = roasterRepository.findByDoctor_id(json.get("id").getAsInt());
                JsonObject reservationOfDoctor = new JsonObject();
                // append 班表
                int res_cnt = 0;
                for (Roaster roaster : roasters) {
                    JsonObject tmp = (JsonObject) g.toJsonTree(roaster).getAsJsonObject();
                    tmp.remove("doctor");
                    reservationOfDoctor.add(Integer.toString(res_cnt++), tmp);
                }
                doctorJson.add("roasters", reservationOfDoctor);
                doctorJson.addProperty("skill", json.get("skill").getAsString());
                doctorJson.addProperty("experience", json.get("experience").getAsString());
                retJson.add("doctor_" + Integer.toString(cnt++), doctorJson);
            }
        } catch (NullPointerException e) {
            return new CommonResponse("Doctor's user table some field is null cause Null exception", 404).toString();
        }
        return new CommonResponse(retJson, 200).toString();
    }

    @PutMapping(path = "/booking", produces = MediaType.APPLICATION_JSON_VALUE)
    public String bookingByDoctorId(
            @RequestParam int user_id,
            @RequestParam int doctor_id,
            @RequestParam String day,
            @RequestParam String time) throws Exception, NoSuchElementException {
//        String bookingNum = "";
//        JsonObject newJson = new JsonObject();
//        List<Roaster> roaster = roasterRepository.findByDoctor_id(doctor_id);
//        Gson g = new Gson();
//        JsonObject json;
        int bookingId;
        Reservation reservation = new Reservation();
        Optional<Doctor> doctor = doctorRepository.findById(doctor_id);
        Optional<User> user = userRepository.findById(user_id);
        Optional<Schedule> schedule = scheduleRepository.findByDayAndTime(day, time);
        try {
            reservation.setUser(user.get());
            reservation.setDoctor(doctor.get());
            reservation.setSchedule(schedule.get());
            bookingId = reservationRepository.save(reservation).getId();
        }
        catch (NoSuchElementException e) {
            return new CommonResponse("booking fail because wrong value is given.", 404).toString();
        }
        catch (Exception e) {
            return new CommonResponse("booking fail because: " + e, 404).toString();
        }
        return new CommonResponse("reservation_id: " + bookingId, 200).toString();
    }
}