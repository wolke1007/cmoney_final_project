package com.cmoney_training_6th.final_project_intellij.controller.user;

import com.cmoney_training_6th.final_project_intellij.model.Doctor;
import com.cmoney_training_6th.final_project_intellij.model.Pet;
import com.cmoney_training_6th.final_project_intellij.model.User;
import com.cmoney_training_6th.final_project_intellij.repos.DoctorRepository;
import com.cmoney_training_6th.final_project_intellij.repos.PetRepository;
import com.cmoney_training_6th.final_project_intellij.repos.UserRepository;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.JwtUtil;
import com.cmoney_training_6th.final_project_intellij.util.ValidateParameter;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Optional;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/pet")
public class PetController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private PetRepository petRepository;

    @Autowired
    private JwtUtil jwtTokenUtil;

    @GetMapping(path = "/hello", produces = MediaType.APPLICATION_JSON_VALUE)
    public String acHello(@RequestParam String utf8) {
        return "account hello 中文測試" + utf8;
    }

    @GetMapping(path = "/all", produces = MediaType.APPLICATION_JSON_VALUE) // debug 用
    public Iterable<Pet> getAllUsers() {
        return petRepository.findAll();
    }

    @GetMapping(path = "", produces = MediaType.APPLICATION_JSON_VALUE)
    public String findUserById(@RequestHeader("Authorization") String jwt) {
        String token = jwt.substring(7);
        String username = jwtTokenUtil.getUserNameFromJwtToken(token);
        Optional<User> user = userRepository.findByUsername(username);
        List<Pet> pets = petRepository.findByUser_id(user.get().getId());
        Gson g = new Gson();
        JsonObject json = new JsonObject();
        int pet_cnt = 0;
        for(Pet pet : pets){
            JsonObject tmp = g.toJsonTree(pet).getAsJsonObject();
            tmp.remove("user");
            json.add(Integer.toString(pet_cnt++),tmp);
        }
        return new CommonResponse(json, 200).toString();
    }

}