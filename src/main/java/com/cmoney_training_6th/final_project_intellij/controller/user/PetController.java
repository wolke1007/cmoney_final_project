package com.cmoney_training_6th.final_project_intellij.controller.user;

import com.cmoney_training_6th.final_project_intellij.model.Doctor;
import com.cmoney_training_6th.final_project_intellij.model.Pet;
import com.cmoney_training_6th.final_project_intellij.model.User;
import com.cmoney_training_6th.final_project_intellij.repos.DoctorRepository;
import com.cmoney_training_6th.final_project_intellij.repos.PetRepository;
import com.cmoney_training_6th.final_project_intellij.repos.UserRepository;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.JwtUtil;
import com.cmoney_training_6th.final_project_intellij.util.ValidateParameter;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Optional;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/user/pet")
public class PetController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private DoctorRepository doctorRepository;

    @Autowired
    private PetRepository petRepository;

    @Autowired
    private JwtUtil jwtTokenUtil;

    @Autowired
    private AuthenticationManager authenticationManager;

    @GetMapping(path = "/hello", produces = MediaType.APPLICATION_JSON_VALUE)
    public String acHello(@RequestParam String utf8) {
        return "account hello 中文測試" + utf8;
    }

    @PutMapping(path = "/regist", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String addNewUser(
            HttpServletResponse response,
            @RequestParam String username,
            @RequestParam String password,
            @RequestParam String join_time,
            @RequestParam String role
    ) throws Exception {
        ValidateParameter checkPassword = new ValidateParameter("password", password);
//        if(!checkPassword.strLongerThan(50)
//                .strShorterThan(0)
//                .getResult()){
//            response.setStatus(400);
//            return new CommonResponse(checkPassword,400);
//        }
        try {
            User n = new User();
            n.setUsername(username);
            n.setPassword(password);
            n.setJoin_time(join_time);
            n.setRole(role);
            userRepository.save(n);
            return new CommonResponse("Saved", 200).toString();
        } catch (DataIntegrityViolationException e) {
            response.setStatus(404);
            return new CommonResponse("Key duplicated", 404).toString();
        }
    }

    @GetMapping(path = "/all", produces = MediaType.APPLICATION_JSON_VALUE) // debug 用
    public Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }

    @GetMapping(path = "/find", produces = MediaType.APPLICATION_JSON_VALUE)
    public String findUserById(@RequestParam int user_id) {
//        authenticationRequest.getUsername()
        // TODO
        List<Pet> pets = petRepository.findByUser_id(user_id);
        Gson g = new Gson();
        JsonObject json = new JsonObject();
//        JsonElement je = g.toJsonTree(pets).getAsJsonObject().get("value");
        int pet_cnt = 0;
        for(Pet pet : pets){
            JsonObject tmp = g.toJsonTree(pet).getAsJsonObject();
            tmp.remove("user");
            json.add(Integer.toString(pet_cnt++),tmp);
        }
        return new CommonResponse(json, 200).toString();
    }

    @PostMapping(path = "/find/role", produces = MediaType.APPLICATION_JSON_VALUE) // DEBUG
    public Iterable<User> findUsersByRole(HttpServletResponse response, @RequestParam String role) {
        System.out.println(userRepository.findAllByRoleOrderByUsername(role));
        return userRepository.findAllByRoleOrderByUsername(role);
    }

    @PostMapping(path = "/find/doctor", produces = MediaType.APPLICATION_JSON_VALUE)
    public Optional<Doctor> findDoctorByUserId(HttpServletResponse response, @RequestParam int id) {
//        System.out.println(doctorRepository.findByUserId(id));
        return doctorRepository.findByUser_id(id);
    }

}