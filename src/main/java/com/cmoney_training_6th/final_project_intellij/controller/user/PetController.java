package com.cmoney_training_6th.final_project_intellij.controller.user;

import com.cmoney_training_6th.final_project_intellij.model.PetPhoto;
import com.cmoney_training_6th.final_project_intellij.model.Pet;
import com.cmoney_training_6th.final_project_intellij.model.User;
import com.cmoney_training_6th.final_project_intellij.repos.*;
import com.cmoney_training_6th.final_project_intellij.services.FilesStorageService;
import com.cmoney_training_6th.final_project_intellij.util.CommonResponse;
import com.cmoney_training_6th.final_project_intellij.util.JsonIter;
import com.cmoney_training_6th.final_project_intellij.util.JwtUtil;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import io.jsonwebtoken.ExpiredJwtException;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

//@Controller // This means that this class is a Controller
@RestController // 用這個就不用每個 request 加上 ResponsBody 才可以回傳 json
@RequestMapping(path = "/pet")
public class PetController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private PetRepository petRepository;

    @Autowired
    private PetPhotoRepository petPhotoRepository;

    @Autowired
    private FilesStorageService filesStorageService;

    @Autowired
    private FileRepository fileRepository;

    @Autowired
    private JwtUtil jwtTokenUtil;

    @GetMapping(path = "/all", produces = MediaType.APPLICATION_JSON_VALUE) // DEBUG
    public Iterable<Pet> getAllUsers() {
        return petRepository.findAll();
    }

    @GetMapping(path = "", produces = MediaType.APPLICATION_JSON_VALUE)
    public String findUserById(HttpServletResponse response,
                               @RequestHeader("Authorization") String jwt) {
        try{
            String token = jwt.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            Optional<User> user = userRepository.findByUsername(username);
            List<Pet> pets = petRepository.findByUserId(user.get().getId());
            JsonArray jsonArr;
            JsonIter ji = new JsonIter();
    //        jsonArr = ji.listIntoArrayWithoutKey(pets, "medicalRecord");
            jsonArr = ji.listIntoArray(pets);
            return new CommonResponse(jsonArr, 200).toString();
        } catch (io.jsonwebtoken.MalformedJwtException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (StringIndexOutOfBoundsException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        }
    }

    @PostMapping(path = "/new", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String addNewPet(
            HttpServletResponse response,
            @RequestHeader("Authorization") String jwt,
            @RequestBody Pet request
    ) {
//        ValidateParameter checkPassword = new ValidateParameter("password", username);
//        if(!checkPassword.strLongerThan(50)
//                .strShorterThan(0)
//                .getResult()){
//            response.setStatus(400);
//            return new CommonResponse(checkPassword,400);
//        }
        try {
            String token = jwt.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            Optional<User> user = userRepository.findByUsername(username);
            request.setUserId(user.get().getId());
            petRepository.save(request);
            return new CommonResponse("success", 200).toString();
        } catch (DataIntegrityViolationException e) {
            response.setStatus(404);
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404).toString();
        } catch (io.jsonwebtoken.MalformedJwtException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (StringIndexOutOfBoundsException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        }
    }

    @PostMapping(path = "/edit", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String editPet(
            HttpServletResponse response,
            @RequestHeader("Authorization") String jwt,
            @RequestBody Pet request
    ) {
//        ValidateParameter checkPassword = new ValidateParameter("password", username);
//        if(!checkPassword.strLongerThan(50)
//                .strShorterThan(0)
//                .getResult()){
//            response.setStatus(400);
//            return new CommonResponse(checkPassword,400);
//        }
        try {
            String token = jwt.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            User user = userRepository.findByUsername(username).orElse(null);
            Pet pet = petRepository.findById(request.getId()).orElse(null);
            if(pet == null){
                response.setStatus(404);
                return new CommonResponse("pet " + request.getId() + " not found: ", 404).toString();
            }
            pet.setUserId(user.getId());
            pet.setChip(request.getChip());
            pet.setWeight(request.getWeight());
            pet.setGender(request.getGender());
            pet.setNeutered(request.isNeutered());
            pet.setAge(request.getAge());
            pet.setBreed(request.getBreed());
            pet.setSpecies(request.getSpecies());
            pet.setName(request.getName());
            pet.setAllergicWith(request.getAllergicWith());
            pet.setOwnDate(request.getOwnDate());
            petRepository.save(pet);
            return new CommonResponse("success", 200).toString();
        } catch (DataIntegrityViolationException e) {
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404).toString();
        } catch (NoSuchElementException e) {
            response.setStatus(404);
            return new CommonResponse("id " + request.getId() + " not found: " + e.getMessage(), 404).toString();
        } catch (io.jsonwebtoken.MalformedJwtException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (StringIndexOutOfBoundsException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        }
    }

    @PostMapping(path = "/delete", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public String deletePet(
            HttpServletResponse response,
            @RequestHeader("Authorization") String jwt,
            @RequestBody Pet request
    ) {
//        ValidateParameter checkPassword = new ValidateParameter("password", username);
//        if(!checkPassword.strLongerThan(50)
//                .strShorterThan(0)
//                .getResult()){
//            response.setStatus(400);
//            return new CommonResponse(checkPassword,400);
//        }
        try {
            String token = jwt.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(token);
            User user = userRepository.findByUsername(username).orElse(null);
            Pet pet = petRepository.findById(request.getId()).orElse(null);
            if(pet == null){
                response.setStatus(404);
                return new CommonResponse("pet " + request.getId() + " not found", 404).toString();
            }
            petRepository.delete(pet);
            return new CommonResponse("success", 200).toString();
        } catch (DataIntegrityViolationException e) {
            return new CommonResponse("fail: " + e.getRootCause().getMessage(), 404).toString();
        } catch (NoSuchElementException e) {
            response.setStatus(404);
            return new CommonResponse("id " + request.getId() + " not found: " + e.getMessage(), 404).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        } catch (io.jsonwebtoken.MalformedJwtException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        } catch (StringIndexOutOfBoundsException e){
            return new CommonResponse("token format fail: " + e.getMessage(), 403).toString();
        }
    }

    @ApiResponses(value = {@ApiResponse(code = 200, message = "照片上傳成功")})
    @ApiOperation("上傳寵物照片")
    @PostMapping(path = "/upload/photo", produces = MediaType.APPLICATION_JSON_VALUE)
    public String uploadFile(HttpServletResponse response,
                             @RequestParam("file") MultipartFile file,
                             @RequestParam("petId") int petId,
                             @RequestHeader("Authorization") String jwt) {

        try{
            String a = jwt.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(a);
            User existingUser = userRepository.findByUsername(username).orElse(null);
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        }

        if (file.isEmpty()) {
            return null;
        }

        String message = "";
        try {
            SimpleDateFormat date = new SimpleDateFormat("yyyy/MMM/d/E_HH:mm:ss", Locale.ENGLISH);
            Date now = new Date();
            PetPhoto fileInfo = new PetPhoto();
            long starttime = System.currentTimeMillis();
            filesStorageService.save(file, starttime);
            fileInfo.setName(starttime + file.getOriginalFilename());
            fileInfo.setTime(starttime);
            fileInfo.setDate(date.format(now));
            fileInfo.setUrl("./uploads");
            fileInfo.setPetId(petId);
            fileRepository.save(fileInfo);
            message = "Uploaded the file successfully: " + file.getName();
            return new CommonResponse(message, 200).toString();
        } catch (Exception e) {
            message = "Could not upload the file: " + file.getOriginalFilename() + "!";
            response.setStatus(404);
            return new CommonResponse(message, 404).toString();
        }
    }

    @GetMapping(path = "/photo", produces = MediaType.APPLICATION_JSON_VALUE)
    public String getPhotoByPetId(HttpServletResponse response,
                                  @RequestHeader("Authorization") String jwt,
                                  @RequestParam int petId) throws IOException {
        try {
            String a = jwt.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(a);
            User user = userRepository.findByUsername(username).orElse(null);
            JsonArray arr = new JsonArray();
            // 這邊沒有做是不是飼主的判斷，目前是所有人都可以拿指定 pet 的圖片(方便前端測試)
            if(petRepository.findById(petId).orElse(null) == null){
                response.setStatus(404);
                return new CommonResponse("pet not found.", 404).toString();
            }
            List<PetPhoto> petPhotos = petPhotoRepository.findAllByPetId(petId);
            if(petPhotos.size() == 0){
                response.setStatus(404);
                return new CommonResponse("pet photo not found.", 404).toString();
            }
            for (PetPhoto petPhoto : petPhotos) {
                JsonObject json = new JsonObject();
                Resource r = filesStorageService.load(petPhoto.getName());
                json.addProperty("petId", petId);
                json.addProperty("URL", MvcUriComponentsBuilder
                        .fromMethodName(PetController.class, "getFile",
                                r.getFile().toPath().getFileName().toString()).build().toString());
                arr.add(json);
            }
            return new CommonResponse(arr, 200).toString();
        } catch (IOException e) {
            response.setStatus(404);
            return new CommonResponse("no such file", 404).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        }
    }

    @GetMapping(path = "/photos", produces = MediaType.APPLICATION_JSON_VALUE)
    public String getPhotosByToken(HttpServletResponse response,
                            @RequestHeader("Authorization") String jwt) throws IOException {
        try {
            String a = jwt.substring(7);
            String username = jwtTokenUtil.getUserNameFromJwtToken(a);
            User user = userRepository.findByUsername(username).orElse(null);
            JsonArray arr = new JsonArray();
            List<PetPhoto> petPhotos = petPhotoRepository.findPetPhotosByUserId(user.getId());
            System.out.println("DEBUG petphotos count: " + petPhotos.size());
            if(petPhotos.size() == 0){
                response.setStatus(404);
                return new CommonResponse("no pet photo found.", 404).toString();
            }
            for (PetPhoto petPhoto : petPhotos) {
                JsonObject json = new JsonObject();
                Resource r = filesStorageService.load(petPhoto.getName());
                json.addProperty("petId", petPhoto.getPetId());
                json.addProperty("URL", MvcUriComponentsBuilder
                        .fromMethodName(PetController.class, "getFile",
                                r.getFile().toPath().getFileName().toString()).build().toString());
                arr.add(json);
            }
            return new CommonResponse(arr, 200).toString();
        } catch (IOException e) {
            response.setStatus(404);
            return new CommonResponse("no such file", 404).toString();
        } catch (ExpiredJwtException e) {
            response.setStatus(403);
            return new CommonResponse("token expired: " + e.getMessage(), 403).toString();
        }
    }

    @GetMapping(path = "/getfiles", produces = MediaType.APPLICATION_JSON_VALUE)
    public String getListFiles(HttpServletResponse response) {
        Iterable<PetPhoto> petPhotos = petPhotoRepository.findAll();
        List<PetPhoto> fileInfos = filesStorageService.loadAll().map(path -> {
            String filename = path.getFileName().toString();
            String url = MvcUriComponentsBuilder
                    .fromMethodName(PetController.class, "getFile", path.getFileName().toString()).build().toString();
            int petId = petPhotos.iterator().next().getPetId();
            System.out.println("pet petId:"+petId);
            return new PetPhoto(filename, url, petId);
        }).collect(Collectors.toList());
        JsonIter ji = new JsonIter();
        JsonArray arr = ji.listIntoArray(fileInfos);
        return new CommonResponse(arr, 200).toString();
    }

    @GetMapping(value = "/download/{filename:.+}", produces = MediaType.IMAGE_JPEG_VALUE) //解析JPG檔
    @ResponseBody
    public ResponseEntity<Resource> getFile(@PathVariable String filename) {

        Resource file = filesStorageService.load(filename);
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFilename() + "\"").body(file);
    }

}